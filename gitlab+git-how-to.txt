
# PAT
Personal Access Tokens (PAT) в GitLab — это способ аутентификации для доступа к API GitLab или другим ресурсам через HTTP/HTTPS запросы без необходимости использования пароля. 
PAT представляет собой уникальный токен, который генерируется пользователем и может использоваться вместо логина и пароля при взаимодействии с GitLab.

# How to clone 
git clone https://oauth2:<your_access_token>@gitlab.example.com/your_username/your_project.git

# Private gitlab 
git clone https://gitlab.apps.<your-gitlab-fqdn>/<your-login-from-gitlab>/manager-crbc.git
Note: this command will ask username and PAT

# Main commands almost the same as for github
git status
git add . 
git commit -m <your-comment>
cd existing_repo
git remote add origin https://gitlab.apps.<your-gitlab-fqdn>/<your-login-from-gitlab>/manager-crbc.git
git branch -M master
git push -uf origin master


# If you have an error below 
fatal: the remote end hung up unexpectedly
### resolution ###
git config --global http.postBuffer 262144000

# Work with new branch 
### Переход на основную ветку (например, main)
git checkout main
### Создание новой ветки и переход на нее
git checkout -b new_feature

# About names for new branch 
### it may be name of company + number issue example below
site-or-company/OSAD-123412
team-name/number-issue-31131
### you can create new branch from another branch (create new branch from master) min two words in new branch
git checkout -n team-name/number-issue-31131 master 

# How to merge branch to main #
git checkout main
### recomendation before merge 
git pull origin main
### merge
git merge feature_branch
### conflict 
git add <конфликтующий_файл>
git commit -m "Resolved conflicts during merge"
### push to main
git push origin main

# How to merge banches gitlab #
git checkout -b version ### new branch with name "version"
git status ### chek status 
... ### some changes in code 
git add . ### add all changes
git commit -m "Added comments to version.go" ### commit changes
git push origin version ### push to gitlab
### then via web interface create merge request and merge it 
### after merge code need to do local sync
git checkout master
git pull origin master 
### local branch will contain all changes 
### delete branches localy 
git branch -d feature/branch-name
### delete branch remoute 
git push origin --delete feature/branch-name
### clean local data
git gc


